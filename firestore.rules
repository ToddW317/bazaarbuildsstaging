rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Builds collection and its subcollections
    match /builds/{buildId} {
      // Allow reading builds
      allow read: if true;
      
      // Allow creating builds if authenticated
      allow create: if isAuthenticated();
      
      // Allow updating builds with specific field restrictions
      allow update: if isAuthenticated() && (
        isOwner(resource.data.userId) || 
        // Allow incrementing views
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['views'])) ||
        // Allow updating likes
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likedBy'])) ||
        // Allow updating ratings
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['rating']) ||
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likedBy']))
      );
      
      // Allow deleting only if owner
      allow delete: if isOwner(resource.data.userId);

      // Comments subcollection
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isAuthenticated();
        allow update: if isAuthenticated() && (
          // Allow updating likes and likedBy arrays
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likedBy']) ||
          // Allow comment owner to update content
          isOwner(resource.data.userId)
        );
        allow delete: if isOwner(resource.data.userId);
      }

      // Ratings subcollection
      match /ratings/{ratingId} {
        allow read: if true;
        allow create, update: if isAuthenticated() && 
          ratingId == request.auth.uid || 
          ratingId == buildId + '_' + request.auth.uid;
        allow delete: if isAuthenticated() && 
          ratingId == request.auth.uid;
      }
    }

    // Users collection
    match /users/{userId} {
      allow read: if true;
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);

      // User's liked builds
      match /likedBuilds/{buildId} {
        allow read: if true;
        allow write: if isOwner(userId);
      }
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
  }
}

